

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Apr 23 18:18:27 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173  001E                     _ADRESH	set	30
   174  000B                     _INTCONbits	set	11
   175  001F                     _ADCON0bits	set	31
   176  0001                     _TMR0	set	1
   177  0006                     _PORTBbits	set	6
   178  0018                     _RCSTAbits	set	24
   179  000C                     _PIR1bits	set	12
   180  0019                     _TXREG	set	25
   181  005A                     _TMR0IF	set	90
   182  009E                     _ADRESL	set	158
   183  008C                     _PIE1bits	set	140
   184  0098                     _TXSTAbits	set	152
   185  0099                     _SPBRG	set	153
   186  0087                     _TRISCbits	set	135
   187  0081                     _OPTION_REG	set	129
   188  009F                     _ADCON1bits	set	159
   189  0085                     _TRISAbits	set	133
   190                           
   191                           	psect	strings
   192  0236                     __pstrings:
   193  0236                     stringtab:
   194  0236                     __stringtab:
   195  0236                     stringcode:	
   196                           ;	String table - string pointers are 1 byte each
   197                           
   198  0236                     stringdir:
   199  0236  3002               	movlw	high stringdir
   200  0237  008A               	movwf	10
   201  0238  0804               	movf	4,w
   202  0239  0A84               	incf	4,f
   203  023A  0782               	addwf	2,f
   204  023B                     __stringbase:
   205  023B  3400               	retlw	0
   206  023C                     __end_of__stringtab:
   207  023C                     STR_1:
   208  023C  3454               	retlw	84	;'T'
   209  023D  3465               	retlw	101	;'e'
   210  023E  346E               	retlw	110	;'n'
   211  023F  3473               	retlw	115	;'s'
   212  0240  3461               	retlw	97	;'a'
   213  0241  346F               	retlw	111	;'o'
   214  0242  3420               	retlw	32	;' '
   215  0243  344D               	retlw	77	;'M'
   216  0244  3465               	retlw	101	;'e'
   217  0245  346E               	retlw	110	;'n'
   218  0246  3473               	retlw	115	;'s'
   219  0247  3475               	retlw	117	;'u'
   220  0248  3472               	retlw	114	;'r'
   221  0249  3461               	retlw	97	;'a'
   222  024A  3464               	retlw	100	;'d'
   223  024B  3461               	retlw	97	;'a'
   224  024C  343A               	retlw	58	;':'
   225  024D  3420               	retlw	32	;' '
   226  024E  3400               	retlw	0
   227  024F                     STR_3:
   228  024F  3420               	retlw	32	;' '
   229  0250  3456               	retlw	86	;'V'
   230  0251  3400               	retlw	0
   231  0252                     STR_4:
   232  0252  340A               	retlw	10
   233  0253  3400               	retlw	0
   234  0254                     STR_2:
   235  0254  342C               	retlw	44	;','
   236  0255  3400               	retlw	0
   237                           
   238                           	psect	cinit
   239  000F                     start_initialization:	
   240                           ; #config settings
   241                           
   242  000F                     __initialization:
   243  000F                     end_of_initialization:	
   244                           ;End of C runtime variable initialization code
   245                           
   246  000F                     __end_of__initialization:
   247  000F  0183               	clrf	3
   248  0010  120A  118A  2813   	ljmp	_main	;jump to C main() function
   249                           
   250                           	psect	cstackCOMMON
   251  0070                     __pcstackCOMMON:
   252  0070                     ?_setStringOnSerial:
   253  0070                     ?_UART_RX_INTERRUPTION:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ??_UART_RX_INTERRUPTION:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_main:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 1 bytes @ 0x0
   264  0070                     	ds	2
   265  0072                     ??_setStringOnSerial:
   266  0072                     ?___wmul:	
   267                           ; 1 bytes @ 0x2
   268                           
   269  0072                     ?___lwmod:	
   270                           ; 2 bytes @ 0x2
   271                           
   272  0072                     setStringOnSerial@count:	
   273                           ; 2 bytes @ 0x2
   274                           
   275  0072                     ___wmul@multiplier:	
   276                           ; 2 bytes @ 0x2
   277                           
   278  0072                     ___lwmod@divisor:	
   279                           ; 2 bytes @ 0x2
   280                           
   281                           
   282                           ; 2 bytes @ 0x2
   283  0072                     	ds	2
   284  0074                     setStringOnSerial@outputString:
   285  0074                     ___wmul@multiplicand:	
   286                           ; 1 bytes @ 0x4
   287                           
   288  0074                     ___lwmod@dividend:	
   289                           ; 2 bytes @ 0x4
   290                           
   291                           
   292                           ; 2 bytes @ 0x4
   293  0074                     	ds	2
   294  0076                     ??___wmul:
   295  0076                     ??___lwmod:	
   296                           ; 1 bytes @ 0x6
   297                           
   298  0076                     ___wmul@product:	
   299                           ; 1 bytes @ 0x6
   300                           
   301                           
   302                           ; 2 bytes @ 0x6
   303  0076                     	ds	1
   304  0077                     ___lwmod@counter:
   305                           
   306                           ; 1 bytes @ 0x7
   307  0077                     	ds	1
   308  0078                     ?___lwdiv:
   309  0078                     ___lwdiv@divisor:	
   310                           ; 2 bytes @ 0x8
   311                           
   312                           
   313                           ; 2 bytes @ 0x8
   314  0078                     	ds	2
   315  007A                     ___lwdiv@dividend:
   316                           
   317                           ; 2 bytes @ 0xA
   318  007A                     	ds	2
   319                           
   320                           	psect	cstackBANK0
   321  0020                     __pcstackBANK0:
   322  0020                     ??___lwdiv:
   323                           
   324                           ; 1 bytes @ 0x0
   325  0020                     	ds	1
   326  0021                     ___lwdiv@quotient:
   327                           
   328                           ; 2 bytes @ 0x1
   329  0021                     	ds	2
   330  0023                     ___lwdiv@counter:
   331                           
   332                           ; 1 bytes @ 0x3
   333  0023                     	ds	1
   334  0024                     ?_itoa:
   335  0024                     itoa@val:	
   336                           ; 1 bytes @ 0x4
   337                           
   338                           
   339                           ; 2 bytes @ 0x4
   340  0024                     	ds	2
   341  0026                     itoa@str:
   342                           
   343                           ; 1 bytes @ 0x6
   344  0026                     	ds	1
   345  0027                     ??_itoa:
   346                           
   347                           ; 1 bytes @ 0x7
   348  0027                     	ds	1
   349  0028                     ??_main:
   350                           
   351                           ; 1 bytes @ 0x8
   352  0028                     	ds	1
   353  0029                     main@voltageConvertedToString:
   354                           
   355                           ; 6 bytes @ 0x9
   356  0029                     	ds	6
   357  002F                     main@preComma:
   358                           
   359                           ; 1 bytes @ 0xF
   360  002F                     	ds	1
   361  0030                     main@posComma:
   362                           
   363                           ; 1 bytes @ 0x10
   364  0030                     	ds	1
   365  0031                     main@potentiometer:
   366                           
   367                           ; 2 bytes @ 0x11
   368  0031                     	ds	2
   369                           
   370                           	psect	maintext
   371  0013                     __pmaintext:	
   372 ;;
   373 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   374 ;;
   375 ;; *************** function _main *****************
   376 ;; Defined at:
   377 ;;		line 58 in file "parte_b_2.c"
   378 ;; Parameters:    Size  Location     Type
   379 ;;		None
   380 ;; Auto vars:     Size  Location     Type
   381 ;;  voltageConve    6    9[BANK0 ] unsigned char [6]
   382 ;;  potentiomete    2   17[BANK0 ] unsigned int 
   383 ;;  posComma        1   16[BANK0 ] unsigned char 
   384 ;;  preComma        1   15[BANK0 ] unsigned char 
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   389 ;; Tracked objects:
   390 ;;		On entry : B00/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   394 ;;      Params:         0       0       0       0       0
   395 ;;      Locals:         0      10       0       0       0
   396 ;;      Temps:          0       1       0       0       0
   397 ;;      Totals:         0      11       0       0       0
   398 ;;Total ram usage:       11 bytes
   399 ;; Hardware stack levels required when called:    3
   400 ;; This function calls:
   401 ;;		___lwdiv
   402 ;;		___wmul
   403 ;;		_itoa
   404 ;;		_setStringOnSerial
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           
   411                           ;psect for function _main
   412  0013                     _main:
   413  0013                     l890:	
   414                           ;incstack = 0
   415                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   416                           
   417                           
   418                           ;parte_b_2.c: 59:     unsigned int potentiometer;;parte_b_2.c: 60:     char voltageConve
      +                          rtedToString[6];;parte_b_2.c: 61:     char preComma = '0';
   419  0013  3030               	movlw	48
   420  0014  1283               	bcf	3,5	;RP0=0, select bank0
   421  0015  1303               	bcf	3,6	;RP1=0, select bank0
   422  0016  00A8               	movwf	??_main
   423  0017  0828               	movf	??_main,w
   424  0018  00AF               	movwf	main@preComma
   425                           
   426                           ;parte_b_2.c: 62:     char posComma = '0';
   427  0019  3030               	movlw	48
   428  001A  00A8               	movwf	??_main
   429  001B  0828               	movf	??_main,w
   430  001C  00B0               	movwf	main@posComma
   431  001D                     l892:
   432                           
   433                           ;parte_b_2.c: 67:     TRISAbits.TRISA1=1;
   434  001D  1683               	bsf	3,5	;RP0=1, select bank1
   435  001E  1303               	bcf	3,6	;RP1=0, select bank1
   436  001F  1485               	bsf	5,1	;volatile
   437  0020                     l894:
   438                           
   439                           ;parte_b_2.c: 70:     ADCON1bits.ADCS2 = 1;
   440  0020  171F               	bsf	31,6	;volatile
   441  0021                     l896:
   442                           
   443                           ;parte_b_2.c: 71:     ADCON0bits.ADCS1 = 1;
   444  0021  1283               	bcf	3,5	;RP0=0, select bank0
   445  0022  1303               	bcf	3,6	;RP1=0, select bank0
   446  0023  179F               	bsf	31,7	;volatile
   447  0024                     l898:
   448                           
   449                           ;parte_b_2.c: 72:     ADCON0bits.ADCS0 = 0;
   450  0024  131F               	bcf	31,6	;volatile
   451  0025                     l900:
   452                           
   453                           ;parte_b_2.c: 75:     ADCON0bits.CHS = 0b001;
   454  0025  081F               	movf	31,w	;volatile
   455  0026  39C7               	andlw	-57
   456  0027  3808               	iorlw	8
   457  0028  009F               	movwf	31	;volatile
   458  0029                     l902:
   459                           
   460                           ;parte_b_2.c: 78:     ADCON1bits.ADFM = 1;
   461  0029  1683               	bsf	3,5	;RP0=1, select bank1
   462  002A  1303               	bcf	3,6	;RP1=0, select bank1
   463  002B  179F               	bsf	31,7	;volatile
   464  002C                     l904:
   465                           
   466                           ;parte_b_2.c: 81:     ADCON1bits.PCFG = 0b0010;
   467  002C  081F               	movf	31,w	;volatile
   468  002D  39F0               	andlw	-16
   469  002E  3802               	iorlw	2
   470  002F  009F               	movwf	31	;volatile
   471  0030                     l906:
   472                           
   473                           ;parte_b_2.c: 84:     ADCON0bits.ADON = 1;
   474  0030  1283               	bcf	3,5	;RP0=0, select bank0
   475  0031  1303               	bcf	3,6	;RP1=0, select bank0
   476  0032  141F               	bsf	31,0	;volatile
   477                           
   478                           ;parte_b_2.c: 87:     OPTION_REG = 0x01;
   479  0033  3001               	movlw	1
   480  0034  1683               	bsf	3,5	;RP0=1, select bank1
   481  0035  1303               	bcf	3,6	;RP1=0, select bank1
   482  0036  0081               	movwf	1	;volatile
   483                           
   484                           ;parte_b_2.c: 88:     TMR0 = 0x05;
   485  0037  3005               	movlw	5
   486  0038  1283               	bcf	3,5	;RP0=0, select bank0
   487  0039  1303               	bcf	3,6	;RP1=0, select bank0
   488  003A  0081               	movwf	1	;volatile
   489  003B                     l908:
   490                           
   491                           ;parte_b_2.c: 89:     INTCONbits.TMR0IE=1;
   492  003B  168B               	bsf	11,5	;volatile
   493  003C                     l910:
   494                           
   495                           ;parte_b_2.c: 92:     TRISCbits.TRISC7 = 1;
   496  003C  1683               	bsf	3,5	;RP0=1, select bank1
   497  003D  1303               	bcf	3,6	;RP1=0, select bank1
   498  003E  1787               	bsf	7,7	;volatile
   499  003F                     l912:
   500                           
   501                           ;parte_b_2.c: 93:     TRISCbits.TRISC6 = 0;
   502  003F  1307               	bcf	7,6	;volatile
   503                           
   504                           ;parte_b_2.c: 95:     SPBRG = 25;
   505  0040  3019               	movlw	25
   506  0041  0099               	movwf	25	;volatile
   507  0042                     l914:
   508                           
   509                           ;parte_b_2.c: 97:     TXSTAbits.TX9 = 0;
   510  0042  1318               	bcf	24,6	;volatile
   511  0043                     l916:
   512                           
   513                           ;parte_b_2.c: 98:     TXSTAbits.TXEN = 1;
   514  0043  1698               	bsf	24,5	;volatile
   515  0044                     l918:
   516                           
   517                           ;parte_b_2.c: 99:     TXSTAbits.SYNC = 0;
   518  0044  1218               	bcf	24,4	;volatile
   519  0045                     l920:
   520                           
   521                           ;parte_b_2.c: 100:     TXSTAbits.BRGH = 1;
   522  0045  1518               	bsf	24,2	;volatile
   523  0046                     l922:
   524                           
   525                           ;parte_b_2.c: 102:     RCSTAbits.SPEN = 1;
   526  0046  1283               	bcf	3,5	;RP0=0, select bank0
   527  0047  1303               	bcf	3,6	;RP1=0, select bank0
   528  0048  1798               	bsf	24,7	;volatile
   529  0049                     l924:
   530                           
   531                           ;parte_b_2.c: 103:     RCSTAbits.RX9 = 0;
   532  0049  1318               	bcf	24,6	;volatile
   533  004A                     l926:
   534                           
   535                           ;parte_b_2.c: 104:     RCSTAbits.CREN = 1;
   536  004A  1618               	bsf	24,4	;volatile
   537  004B                     l928:
   538                           
   539                           ;parte_b_2.c: 107:     INTCONbits.PEIE = 1;
   540  004B  170B               	bsf	11,6	;volatile
   541  004C                     l930:
   542                           
   543                           ;parte_b_2.c: 108:     INTCONbits.GIE = 1;
   544  004C  178B               	bsf	11,7	;volatile
   545  004D                     l932:
   546                           
   547                           ;parte_b_2.c: 109:     PIE1bits.RCIE = 1;
   548  004D  1683               	bsf	3,5	;RP0=1, select bank1
   549  004E  1303               	bcf	3,6	;RP1=0, select bank1
   550  004F  168C               	bsf	12,5	;volatile
   551  0050                     l934:
   552                           
   553                           ;parte_b_2.c: 113:         ADCON0bits.GO = 1;
   554  0050  1283               	bcf	3,5	;RP0=0, select bank0
   555  0051  1303               	bcf	3,6	;RP1=0, select bank0
   556  0052  151F               	bsf	31,2	;volatile
   557  0053                     l64:	
   558                           ;parte_b_2.c: 114:         while(ADCON0bits.GO == 1);
   559                           
   560  0053  191F               	btfsc	31,2	;volatile
   561  0054  2856               	goto	u461
   562  0055  2857               	goto	u460
   563  0056                     u461:
   564  0056  2853               	goto	l64
   565  0057                     u460:
   566  0057                     l936:
   567                           
   568                           ;parte_b_2.c: 116:         potentiometer = (unsigned int) (ADRESH<<8 | ADRESL);
   569  0057  081E               	movf	30,w	;volatile
   570  0058  00B2               	movwf	main@potentiometer+1
   571  0059  1683               	bsf	3,5	;RP0=1, select bank1
   572  005A  1303               	bcf	3,6	;RP1=0, select bank1
   573  005B  081E               	movf	30,w	;volatile
   574  005C  1283               	bcf	3,5	;RP0=0, select bank0
   575  005D  1303               	bcf	3,6	;RP1=0, select bank0
   576  005E  00B1               	movwf	main@potentiometer
   577  005F                     l938:
   578                           
   579                           ;parte_b_2.c: 118:         potentiometer=potentiometer*50/1023;
   580  005F  30FF               	movlw	255
   581  0060  00F8               	movwf	___lwdiv@divisor
   582  0061  3003               	movlw	3
   583  0062  00F9               	movwf	___lwdiv@divisor+1
   584  0063  0832               	movf	main@potentiometer+1,w
   585  0064  00F3               	movwf	___wmul@multiplier+1
   586  0065  0831               	movf	main@potentiometer,w
   587  0066  00F2               	movwf	___wmul@multiplier
   588  0067  3032               	movlw	50
   589  0068  00F4               	movwf	___wmul@multiplicand
   590  0069  3000               	movlw	0
   591  006A  00F5               	movwf	___wmul@multiplicand+1
   592  006B  120A  118A  2211  120A  118A  	fcall	___wmul
   593  0070  0873               	movf	?___wmul+1,w
   594  0071  00FB               	movwf	___lwdiv@dividend+1
   595  0072  0872               	movf	?___wmul,w
   596  0073  00FA               	movwf	___lwdiv@dividend
   597  0074  120A  118A  216A  120A  118A  	fcall	___lwdiv
   598  0079  0879               	movf	?___lwdiv+1,w
   599  007A  1283               	bcf	3,5	;RP0=0, select bank0
   600  007B  1303               	bcf	3,6	;RP1=0, select bank0
   601  007C  00B2               	movwf	main@potentiometer+1
   602  007D  0878               	movf	?___lwdiv,w
   603  007E  00B1               	movwf	main@potentiometer
   604  007F                     l940:
   605                           
   606                           ;parte_b_2.c: 119:         itoa(potentiometer,voltageConvertedToString);
   607  007F  0832               	movf	main@potentiometer+1,w
   608  0080  00A5               	movwf	itoa@val+1
   609  0081  0831               	movf	main@potentiometer,w
   610  0082  00A4               	movwf	itoa@val
   611  0083  3029               	movlw	(low (main@voltageConvertedToString| 0))& (0+255)
   612  0084  00A8               	movwf	??_main
   613  0085  0828               	movf	??_main,w
   614  0086  00A6               	movwf	itoa@str
   615  0087  120A  118A  20C6  120A  118A  	fcall	_itoa
   616  008C                     l942:
   617                           
   618                           ;parte_b_2.c: 121:         if(voltageConvertedToString[3]!= preComma || voltageConverted
      +                          ToString[4]!= posComma){
   619  008C  1283               	bcf	3,5	;RP0=0, select bank0
   620  008D  1303               	bcf	3,6	;RP1=0, select bank0
   621  008E  082C               	movf	main@voltageConvertedToString+3,w
   622  008F  062F               	xorwf	main@preComma,w
   623  0090  1D03               	skipz
   624  0091  2893               	goto	u471
   625  0092  2894               	goto	u470
   626  0093                     u471:
   627  0093  289A               	goto	l946
   628  0094                     u470:
   629  0094                     l944:
   630  0094  082D               	movf	main@voltageConvertedToString+4,w
   631  0095  0630               	xorwf	main@posComma,w
   632  0096  1903               	skipnz
   633  0097  2899               	goto	u481
   634  0098  289A               	goto	u480
   635  0099                     u481:
   636  0099  2850               	goto	l934
   637  009A                     u480:
   638  009A                     l946:
   639                           
   640                           ;parte_b_2.c: 122:             preComma = voltageConvertedToString[3];
   641  009A  082C               	movf	main@voltageConvertedToString+3,w
   642  009B  00A8               	movwf	??_main
   643  009C  0828               	movf	??_main,w
   644  009D  00AF               	movwf	main@preComma
   645                           
   646                           ;parte_b_2.c: 123:             posComma = voltageConvertedToString[4];
   647  009E  082D               	movf	main@voltageConvertedToString+4,w
   648  009F  00A8               	movwf	??_main
   649  00A0  0828               	movf	??_main,w
   650  00A1  00B0               	movwf	main@posComma
   651  00A2                     l948:
   652                           
   653                           ;parte_b_2.c: 124:             setStringOnSerial("Tensao Mensurada: ");
   654  00A2  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   655  00A3  120A  118A  21EA  120A  118A  	fcall	_setStringOnSerial
   656  00A8                     l950:
   657                           
   658                           ;parte_b_2.c: 125:             TXREG = voltageConvertedToString[3];
   659  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   660  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   661  00AA  082C               	movf	main@voltageConvertedToString+3,w
   662  00AB  0099               	movwf	25	;volatile
   663                           
   664                           ;parte_b_2.c: 126:             setStringOnSerial(",");
   665  00AC  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   666  00AD  120A  118A  21EA  120A  118A  	fcall	_setStringOnSerial
   667  00B2                     l952:
   668                           
   669                           ;parte_b_2.c: 127:             TXREG = voltageConvertedToString[4];
   670  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   671  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   672  00B4  082D               	movf	main@voltageConvertedToString+4,w
   673  00B5  0099               	movwf	25	;volatile
   674  00B6                     l954:
   675                           
   676                           ;parte_b_2.c: 128:             setStringOnSerial(" V");
   677  00B6  3014               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   678  00B7  120A  118A  21EA  120A  118A  	fcall	_setStringOnSerial
   679  00BC                     l956:
   680                           
   681                           ;parte_b_2.c: 129:             setStringOnSerial("\n");
   682  00BC  3017               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   683  00BD  120A  118A  21EA  120A  118A  	fcall	_setStringOnSerial
   684  00C2  2850               	goto	l934
   685  00C3  120A  118A  280C   	ljmp	start
   686  00C6                     __end_of_main:
   687                           
   688                           	psect	text1
   689  01EA                     __ptext1:	
   690 ;; *************** function _setStringOnSerial *****************
   691 ;; Defined at:
   692 ;;		line 26 in file "parte_b_2.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  outputString    1    wreg     PTR unsigned char 
   695 ;;		 -> STR_4(2), STR_3(3), STR_2(2), STR_1(19), 
   696 ;; Auto vars:     Size  Location     Type
   697 ;;  outputString    1    4[COMMON] PTR unsigned char 
   698 ;;		 -> STR_4(2), STR_3(3), STR_2(2), STR_1(19), 
   699 ;;  count           2    2[COMMON] int 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         3       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         3       0       0       0       0
   713 ;;Total ram usage:        3 bytes
   714 ;; Hardware stack levels used:    2
   715 ;; Hardware stack levels required when called:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _setStringOnSerial
   725  01EA                     _setStringOnSerial:
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _setStringOnSerial: [wreg-fsr0h+status,2+status,0+pclath]
   729                           ;setStringOnSerial@outputString stored from wreg
   730  01EA  00F4               	movwf	setStringOnSerial@outputString
   731  01EB                     l868:
   732                           
   733                           ;parte_b_2.c: 27:     int count=0;
   734  01EB  01F2               	clrf	setStringOnSerial@count
   735  01EC  01F3               	clrf	setStringOnSerial@count+1
   736                           
   737                           ;parte_b_2.c: 28:     while(outputString[count] != 0){
   738  01ED  2A03               	goto	l874
   739  01EE                     l870:
   740                           
   741                           ;parte_b_2.c: 29:         TXREG = outputString[count];
   742  01EE  0872               	movf	setStringOnSerial@count,w
   743  01EF  0774               	addwf	setStringOnSerial@outputString,w
   744  01F0  0084               	movwf	4
   745  01F1  120A  118A  2236  120A  118A  	fcall	stringdir
   746  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   747  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   748  01F8  0099               	movwf	25	;volatile
   749  01F9                     l872:
   750                           
   751                           ;parte_b_2.c: 30:         count++;
   752  01F9  3001               	movlw	1
   753  01FA  07F2               	addwf	setStringOnSerial@count,f
   754  01FB  1803               	skipnc
   755  01FC  0AF3               	incf	setStringOnSerial@count+1,f
   756  01FD  3000               	movlw	0
   757  01FE  07F3               	addwf	setStringOnSerial@count+1,f
   758  01FF                     l44:	
   759                           ;parte_b_2.c: 31:         while(!PIR1bits.TXIF);
   760                           
   761  01FF  1E0C               	btfss	12,4	;volatile
   762  0200  2A02               	goto	u401
   763  0201  2A03               	goto	u400
   764  0202                     u401:
   765  0202  29FF               	goto	l44
   766  0203                     u400:
   767  0203                     l874:
   768                           
   769                           ;parte_b_2.c: 28:     while(outputString[count] != 0){
   770  0203  0872               	movf	setStringOnSerial@count,w
   771  0204  0774               	addwf	setStringOnSerial@outputString,w
   772  0205  0084               	movwf	4
   773  0206  120A  118A  2236  120A  118A  	fcall	stringdir
   774  020B  3A00               	xorlw	0
   775  020C  1D03               	skipz
   776  020D  2A0F               	goto	u411
   777  020E  2A10               	goto	u410
   778  020F                     u411:
   779  020F  29EE               	goto	l870
   780  0210                     u410:
   781  0210                     l48:
   782  0210  0008               	return
   783  0211                     __end_of_setStringOnSerial:
   784                           
   785                           	psect	text2
   786  00C6                     __ptext2:	
   787 ;; *************** function _itoa *****************
   788 ;; Defined at:
   789 ;;		line 19 in file "itoa.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  val             2    4[BANK0 ] unsigned int 
   792 ;;  str             1    6[BANK0 ] PTR unsigned char 
   793 ;;		 -> main@voltageConvertedToString(6), 
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   805 ;;      Params:         0       3       0       0       0
   806 ;;      Locals:         0       0       0       0       0
   807 ;;      Temps:          0       1       0       0       0
   808 ;;      Totals:         0       4       0       0       0
   809 ;;Total ram usage:        4 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    2
   812 ;; This function calls:
   813 ;;		___lwdiv
   814 ;;		___lwmod
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           
   821                           ;psect for function _itoa
   822  00C6                     _itoa:
   823  00C6                     l864:	
   824                           ;incstack = 0
   825                           ; Regs used in _itoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   826                           
   827                           
   828                           ;itoa.c: 19: void itoa(unsigned int val, char* str );itoa.c: 20: {;itoa.c: 21:   str[0]=
      +                          (val/10000)+0x30;
   829  00C6  3010               	movlw	16
   830  00C7  00F8               	movwf	___lwdiv@divisor
   831  00C8  3027               	movlw	39
   832  00C9  00F9               	movwf	___lwdiv@divisor+1
   833  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   834  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   835  00CC  0825               	movf	itoa@val+1,w
   836  00CD  00FB               	movwf	___lwdiv@dividend+1
   837  00CE  0824               	movf	itoa@val,w
   838  00CF  00FA               	movwf	___lwdiv@dividend
   839  00D0  120A  118A  216A  120A  118A  	fcall	___lwdiv
   840  00D5  0878               	movf	?___lwdiv,w
   841  00D6  3E30               	addlw	48
   842  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   843  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   844  00D9  00A7               	movwf	??_itoa
   845  00DA  0826               	movf	itoa@str,w
   846  00DB  0084               	movwf	4
   847  00DC  0827               	movf	??_itoa,w
   848  00DD  1383               	bcf	3,7	;select IRP bank0
   849  00DE  0080               	movwf	0
   850                           
   851                           ;itoa.c: 22:   str[1]=((val%10000)/1000)+0x30;
   852  00DF  30E8               	movlw	232
   853  00E0  00F8               	movwf	___lwdiv@divisor
   854  00E1  3003               	movlw	3
   855  00E2  00F9               	movwf	___lwdiv@divisor+1
   856  00E3  0825               	movf	itoa@val+1,w
   857  00E4  00F5               	movwf	___lwmod@dividend+1
   858  00E5  0824               	movf	itoa@val,w
   859  00E6  00F4               	movwf	___lwmod@dividend
   860  00E7  3010               	movlw	16
   861  00E8  00F2               	movwf	___lwmod@divisor
   862  00E9  3027               	movlw	39
   863  00EA  00F3               	movwf	___lwmod@divisor+1
   864  00EB  120A  118A  21B0  120A  118A  	fcall	___lwmod
   865  00F0  0873               	movf	?___lwmod+1,w
   866  00F1  00FB               	movwf	___lwdiv@dividend+1
   867  00F2  0872               	movf	?___lwmod,w
   868  00F3  00FA               	movwf	___lwdiv@dividend
   869  00F4  120A  118A  216A  120A  118A  	fcall	___lwdiv
   870  00F9  0878               	movf	?___lwdiv,w
   871  00FA  3E30               	addlw	48
   872  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   873  00FC  1303               	bcf	3,6	;RP1=0, select bank0
   874  00FD  00A7               	movwf	??_itoa
   875  00FE  0A26               	incf	itoa@str,w
   876  00FF  0084               	movwf	4
   877  0100  0827               	movf	??_itoa,w
   878  0101  1383               	bcf	3,7	;select IRP bank0
   879  0102  0080               	movwf	0
   880                           
   881                           ;itoa.c: 23:   str[2]=((val%1000)/100)+0x30;
   882  0103  3064               	movlw	100
   883  0104  00F8               	movwf	___lwdiv@divisor
   884  0105  3000               	movlw	0
   885  0106  00F9               	movwf	___lwdiv@divisor+1
   886  0107  0825               	movf	itoa@val+1,w
   887  0108  00F5               	movwf	___lwmod@dividend+1
   888  0109  0824               	movf	itoa@val,w
   889  010A  00F4               	movwf	___lwmod@dividend
   890  010B  30E8               	movlw	232
   891  010C  00F2               	movwf	___lwmod@divisor
   892  010D  3003               	movlw	3
   893  010E  00F3               	movwf	___lwmod@divisor+1
   894  010F  120A  118A  21B0  120A  118A  	fcall	___lwmod
   895  0114  0873               	movf	?___lwmod+1,w
   896  0115  00FB               	movwf	___lwdiv@dividend+1
   897  0116  0872               	movf	?___lwmod,w
   898  0117  00FA               	movwf	___lwdiv@dividend
   899  0118  120A  118A  216A  120A  118A  	fcall	___lwdiv
   900  011D  0878               	movf	?___lwdiv,w
   901  011E  3E30               	addlw	48
   902  011F  1283               	bcf	3,5	;RP0=0, select bank0
   903  0120  1303               	bcf	3,6	;RP1=0, select bank0
   904  0121  00A7               	movwf	??_itoa
   905  0122  0826               	movf	itoa@str,w
   906  0123  3E02               	addlw	2
   907  0124  0084               	movwf	4
   908  0125  0827               	movf	??_itoa,w
   909  0126  1383               	bcf	3,7	;select IRP bank0
   910  0127  0080               	movwf	0
   911                           
   912                           ;itoa.c: 24:   str[3]=((val%100)/10)+0x30;
   913  0128  300A               	movlw	10
   914  0129  00F8               	movwf	___lwdiv@divisor
   915  012A  3000               	movlw	0
   916  012B  00F9               	movwf	___lwdiv@divisor+1
   917  012C  0825               	movf	itoa@val+1,w
   918  012D  00F5               	movwf	___lwmod@dividend+1
   919  012E  0824               	movf	itoa@val,w
   920  012F  00F4               	movwf	___lwmod@dividend
   921  0130  3064               	movlw	100
   922  0131  00F2               	movwf	___lwmod@divisor
   923  0132  3000               	movlw	0
   924  0133  00F3               	movwf	___lwmod@divisor+1
   925  0134  120A  118A  21B0  120A  118A  	fcall	___lwmod
   926  0139  0873               	movf	?___lwmod+1,w
   927  013A  00FB               	movwf	___lwdiv@dividend+1
   928  013B  0872               	movf	?___lwmod,w
   929  013C  00FA               	movwf	___lwdiv@dividend
   930  013D  120A  118A  216A  120A  118A  	fcall	___lwdiv
   931  0142  0878               	movf	?___lwdiv,w
   932  0143  3E30               	addlw	48
   933  0144  1283               	bcf	3,5	;RP0=0, select bank0
   934  0145  1303               	bcf	3,6	;RP1=0, select bank0
   935  0146  00A7               	movwf	??_itoa
   936  0147  0826               	movf	itoa@str,w
   937  0148  3E03               	addlw	3
   938  0149  0084               	movwf	4
   939  014A  0827               	movf	??_itoa,w
   940  014B  1383               	bcf	3,7	;select IRP bank0
   941  014C  0080               	movwf	0
   942                           
   943                           ;itoa.c: 25:   str[4]=(val%10)+0x30;
   944  014D  300A               	movlw	10
   945  014E  00F2               	movwf	___lwmod@divisor
   946  014F  3000               	movlw	0
   947  0150  00F3               	movwf	___lwmod@divisor+1
   948  0151  0825               	movf	itoa@val+1,w
   949  0152  00F5               	movwf	___lwmod@dividend+1
   950  0153  0824               	movf	itoa@val,w
   951  0154  00F4               	movwf	___lwmod@dividend
   952  0155  120A  118A  21B0  120A  118A  	fcall	___lwmod
   953  015A  0872               	movf	?___lwmod,w
   954  015B  3E30               	addlw	48
   955  015C  1283               	bcf	3,5	;RP0=0, select bank0
   956  015D  1303               	bcf	3,6	;RP1=0, select bank0
   957  015E  00A7               	movwf	??_itoa
   958  015F  0826               	movf	itoa@str,w
   959  0160  3E04               	addlw	4
   960  0161  0084               	movwf	4
   961  0162  0827               	movf	??_itoa,w
   962  0163  1383               	bcf	3,7	;select IRP bank0
   963  0164  0080               	movwf	0
   964  0165                     l866:
   965                           
   966                           ;itoa.c: 26:   str[5]=0;
   967  0165  0826               	movf	itoa@str,w
   968  0166  3E05               	addlw	5
   969  0167  0084               	movwf	4
   970  0168  0180               	clrf	0
   971  0169                     l3:
   972  0169  0008               	return
   973  016A                     __end_of_itoa:
   974                           
   975                           	psect	text3
   976  01B0                     __ptext3:	
   977 ;; *************** function ___lwmod *****************
   978 ;; Defined at:
   979 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  divisor         2    2[COMMON] unsigned int 
   982 ;;  dividend        2    4[COMMON] unsigned int 
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  counter         1    7[COMMON] unsigned char 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  2    2[COMMON] unsigned int 
   987 ;; Registers used:
   988 ;;		wreg, status,2, status,0
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         4       0       0       0       0
   995 ;;      Locals:         1       0       0       0       0
   996 ;;      Temps:          1       0       0       0       0
   997 ;;      Totals:         6       0       0       0       0
   998 ;;Total ram usage:        6 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    1
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_itoa
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function ___lwmod
  1010  01B0                     ___lwmod:
  1011  01B0                     l842:	
  1012                           ;incstack = 0
  1013                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1014                           
  1015  01B0  0872               	movf	___lwmod@divisor,w
  1016  01B1  0473               	iorwf	___lwmod@divisor+1,w
  1017  01B2  1903               	btfsc	3,2
  1018  01B3  29B5               	goto	u341
  1019  01B4  29B6               	goto	u340
  1020  01B5                     u341:
  1021  01B5  29E5               	goto	l860
  1022  01B6                     u340:
  1023  01B6                     l844:
  1024  01B6  01F7               	clrf	___lwmod@counter
  1025  01B7  0AF7               	incf	___lwmod@counter,f
  1026  01B8  29C4               	goto	l850
  1027  01B9                     l846:
  1028  01B9  3001               	movlw	1
  1029  01BA                     u355:
  1030  01BA  1003               	clrc
  1031  01BB  0DF2               	rlf	___lwmod@divisor,f
  1032  01BC  0DF3               	rlf	___lwmod@divisor+1,f
  1033  01BD  3EFF               	addlw	-1
  1034  01BE  1D03               	skipz
  1035  01BF  29BA               	goto	u355
  1036  01C0                     l848:
  1037  01C0  3001               	movlw	1
  1038  01C1  00F6               	movwf	??___lwmod
  1039  01C2  0876               	movf	??___lwmod,w
  1040  01C3  07F7               	addwf	___lwmod@counter,f
  1041  01C4                     l850:
  1042  01C4  1FF3               	btfss	___lwmod@divisor+1,7
  1043  01C5  29C7               	goto	u361
  1044  01C6  29C8               	goto	u360
  1045  01C7                     u361:
  1046  01C7  29B9               	goto	l846
  1047  01C8                     u360:
  1048  01C8                     l852:
  1049  01C8  0873               	movf	___lwmod@divisor+1,w
  1050  01C9  0275               	subwf	___lwmod@dividend+1,w
  1051  01CA  1D03               	skipz
  1052  01CB  29CE               	goto	u375
  1053  01CC  0872               	movf	___lwmod@divisor,w
  1054  01CD  0274               	subwf	___lwmod@dividend,w
  1055  01CE                     u375:
  1056  01CE  1C03               	skipc
  1057  01CF  29D1               	goto	u371
  1058  01D0  29D2               	goto	u370
  1059  01D1                     u371:
  1060  01D1  29D8               	goto	l856
  1061  01D2                     u370:
  1062  01D2                     l854:
  1063  01D2  0872               	movf	___lwmod@divisor,w
  1064  01D3  02F4               	subwf	___lwmod@dividend,f
  1065  01D4  0873               	movf	___lwmod@divisor+1,w
  1066  01D5  1C03               	skipc
  1067  01D6  03F5               	decf	___lwmod@dividend+1,f
  1068  01D7  02F5               	subwf	___lwmod@dividend+1,f
  1069  01D8                     l856:
  1070  01D8  3001               	movlw	1
  1071  01D9                     u385:
  1072  01D9  1003               	clrc
  1073  01DA  0CF3               	rrf	___lwmod@divisor+1,f
  1074  01DB  0CF2               	rrf	___lwmod@divisor,f
  1075  01DC  3EFF               	addlw	-1
  1076  01DD  1D03               	skipz
  1077  01DE  29D9               	goto	u385
  1078  01DF                     l858:
  1079  01DF  3001               	movlw	1
  1080  01E0  02F7               	subwf	___lwmod@counter,f
  1081  01E1  1D03               	btfss	3,2
  1082  01E2  29E4               	goto	u391
  1083  01E3  29E5               	goto	u390
  1084  01E4                     u391:
  1085  01E4  29C8               	goto	l852
  1086  01E5                     u390:
  1087  01E5                     l860:
  1088  01E5  0875               	movf	___lwmod@dividend+1,w
  1089  01E6  00F3               	movwf	?___lwmod+1
  1090  01E7  0874               	movf	___lwmod@dividend,w
  1091  01E8  00F2               	movwf	?___lwmod
  1092  01E9                     l440:
  1093  01E9  0008               	return
  1094  01EA                     __end_of___lwmod:
  1095                           
  1096                           	psect	text4
  1097  016A                     __ptext4:	
  1098 ;; *************** function ___lwdiv *****************
  1099 ;; Defined at:
  1100 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  divisor         2    8[COMMON] unsigned int 
  1103 ;;  dividend        2   10[COMMON] unsigned int 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  quotient        2    1[BANK0 ] unsigned int 
  1106 ;;  counter         1    3[BANK0 ] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  2    8[COMMON] unsigned int 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1116 ;;      Params:         4       0       0       0       0
  1117 ;;      Locals:         0       3       0       0       0
  1118 ;;      Temps:          0       1       0       0       0
  1119 ;;      Totals:         4       4       0       0       0
  1120 ;;Total ram usage:        8 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    1
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_itoa
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           
  1132                           ;psect for function ___lwdiv
  1133  016A                     ___lwdiv:
  1134  016A                     l816:	
  1135                           ;incstack = 0
  1136                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1137                           
  1138  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1139  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1140  016C  01A1               	clrf	___lwdiv@quotient
  1141  016D  01A2               	clrf	___lwdiv@quotient+1
  1142  016E                     l818:
  1143  016E  0878               	movf	___lwdiv@divisor,w
  1144  016F  0479               	iorwf	___lwdiv@divisor+1,w
  1145  0170  1903               	btfsc	3,2
  1146  0171  2973               	goto	u271
  1147  0172  2974               	goto	u270
  1148  0173                     u271:
  1149  0173  29AB               	goto	l838
  1150  0174                     u270:
  1151  0174                     l820:
  1152  0174  01A3               	clrf	___lwdiv@counter
  1153  0175  0AA3               	incf	___lwdiv@counter,f
  1154  0176  2982               	goto	l826
  1155  0177                     l822:
  1156  0177  3001               	movlw	1
  1157  0178                     u285:
  1158  0178  1003               	clrc
  1159  0179  0DF8               	rlf	___lwdiv@divisor,f
  1160  017A  0DF9               	rlf	___lwdiv@divisor+1,f
  1161  017B  3EFF               	addlw	-1
  1162  017C  1D03               	skipz
  1163  017D  2978               	goto	u285
  1164  017E                     l824:
  1165  017E  3001               	movlw	1
  1166  017F  00A0               	movwf	??___lwdiv
  1167  0180  0820               	movf	??___lwdiv,w
  1168  0181  07A3               	addwf	___lwdiv@counter,f
  1169  0182                     l826:
  1170  0182  1FF9               	btfss	___lwdiv@divisor+1,7
  1171  0183  2985               	goto	u291
  1172  0184  2986               	goto	u290
  1173  0185                     u291:
  1174  0185  2977               	goto	l822
  1175  0186                     u290:
  1176  0186                     l828:
  1177  0186  3001               	movlw	1
  1178  0187                     u305:
  1179  0187  1003               	clrc
  1180  0188  0DA1               	rlf	___lwdiv@quotient,f
  1181  0189  0DA2               	rlf	___lwdiv@quotient+1,f
  1182  018A  3EFF               	addlw	-1
  1183  018B  1D03               	skipz
  1184  018C  2987               	goto	u305
  1185  018D  0879               	movf	___lwdiv@divisor+1,w
  1186  018E  027B               	subwf	___lwdiv@dividend+1,w
  1187  018F  1D03               	skipz
  1188  0190  2993               	goto	u315
  1189  0191  0878               	movf	___lwdiv@divisor,w
  1190  0192  027A               	subwf	___lwdiv@dividend,w
  1191  0193                     u315:
  1192  0193  1C03               	skipc
  1193  0194  2996               	goto	u311
  1194  0195  2997               	goto	u310
  1195  0196                     u311:
  1196  0196  299E               	goto	l834
  1197  0197                     u310:
  1198  0197                     l830:
  1199  0197  0878               	movf	___lwdiv@divisor,w
  1200  0198  02FA               	subwf	___lwdiv@dividend,f
  1201  0199  0879               	movf	___lwdiv@divisor+1,w
  1202  019A  1C03               	skipc
  1203  019B  03FB               	decf	___lwdiv@dividend+1,f
  1204  019C  02FB               	subwf	___lwdiv@dividend+1,f
  1205  019D                     l832:
  1206  019D  1421               	bsf	___lwdiv@quotient,0
  1207  019E                     l834:
  1208  019E  3001               	movlw	1
  1209  019F                     u325:
  1210  019F  1003               	clrc
  1211  01A0  0CF9               	rrf	___lwdiv@divisor+1,f
  1212  01A1  0CF8               	rrf	___lwdiv@divisor,f
  1213  01A2  3EFF               	addlw	-1
  1214  01A3  1D03               	skipz
  1215  01A4  299F               	goto	u325
  1216  01A5                     l836:
  1217  01A5  3001               	movlw	1
  1218  01A6  02A3               	subwf	___lwdiv@counter,f
  1219  01A7  1D03               	btfss	3,2
  1220  01A8  29AA               	goto	u331
  1221  01A9  29AB               	goto	u330
  1222  01AA                     u331:
  1223  01AA  2986               	goto	l828
  1224  01AB                     u330:
  1225  01AB                     l838:
  1226  01AB  0822               	movf	___lwdiv@quotient+1,w
  1227  01AC  00F9               	movwf	?___lwdiv+1
  1228  01AD  0821               	movf	___lwdiv@quotient,w
  1229  01AE  00F8               	movwf	?___lwdiv
  1230  01AF                     l430:
  1231  01AF  0008               	return
  1232  01B0                     __end_of___lwdiv:
  1233                           
  1234                           	psect	text5
  1235  0211                     __ptext5:	
  1236 ;; *************** function ___wmul *****************
  1237 ;; Defined at:
  1238 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  multiplier      2    2[COMMON] unsigned int 
  1241 ;;  multiplicand    2    4[COMMON] unsigned int 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  product         2    6[COMMON] unsigned int 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2    2[COMMON] unsigned int 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         4       0       0       0       0
  1254 ;;      Locals:         2       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0
  1256 ;;      Totals:         6       0       0       0       0
  1257 ;;Total ram usage:        6 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    1
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function ___wmul
  1269  0211                     ___wmul:
  1270  0211                     l876:	
  1271                           ;incstack = 0
  1272                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1273                           
  1274  0211  01F6               	clrf	___wmul@product
  1275  0212  01F7               	clrf	___wmul@product+1
  1276  0213                     l878:
  1277  0213  1C72               	btfss	___wmul@multiplier,0
  1278  0214  2A16               	goto	u421
  1279  0215  2A17               	goto	u420
  1280  0216                     u421:
  1281  0216  2A1D               	goto	l158
  1282  0217                     u420:
  1283  0217                     l880:
  1284  0217  0874               	movf	___wmul@multiplicand,w
  1285  0218  07F6               	addwf	___wmul@product,f
  1286  0219  1803               	skipnc
  1287  021A  0AF7               	incf	___wmul@product+1,f
  1288  021B  0875               	movf	___wmul@multiplicand+1,w
  1289  021C  07F7               	addwf	___wmul@product+1,f
  1290  021D                     l158:
  1291  021D  3001               	movlw	1
  1292  021E                     u435:
  1293  021E  1003               	clrc
  1294  021F  0DF4               	rlf	___wmul@multiplicand,f
  1295  0220  0DF5               	rlf	___wmul@multiplicand+1,f
  1296  0221  3EFF               	addlw	-1
  1297  0222  1D03               	skipz
  1298  0223  2A1E               	goto	u435
  1299  0224                     l882:
  1300  0224  3001               	movlw	1
  1301  0225                     u445:
  1302  0225  1003               	clrc
  1303  0226  0CF3               	rrf	___wmul@multiplier+1,f
  1304  0227  0CF2               	rrf	___wmul@multiplier,f
  1305  0228  3EFF               	addlw	-1
  1306  0229  1D03               	skipz
  1307  022A  2A25               	goto	u445
  1308  022B                     l884:
  1309  022B  0872               	movf	___wmul@multiplier,w
  1310  022C  0473               	iorwf	___wmul@multiplier+1,w
  1311  022D  1D03               	btfss	3,2
  1312  022E  2A30               	goto	u451
  1313  022F  2A31               	goto	u450
  1314  0230                     u451:
  1315  0230  2A13               	goto	l878
  1316  0231                     u450:
  1317  0231                     l886:
  1318  0231  0877               	movf	___wmul@product+1,w
  1319  0232  00F3               	movwf	?___wmul+1
  1320  0233  0876               	movf	___wmul@product,w
  1321  0234  00F2               	movwf	?___wmul
  1322  0235                     l160:
  1323  0235  0008               	return
  1324  0236                     __end_of___wmul:
  1325                           
  1326                           	psect	text6
  1327  0256                     __ptext6:	
  1328 ;; *************** function _UART_RX_INTERRUPTION *****************
  1329 ;; Defined at:
  1330 ;;		line 36 in file "parte_b_2.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1344 ;;      Params:         0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0
  1346 ;;      Temps:          2       0       0       0       0
  1347 ;;      Totals:         2       0       0       0       0
  1348 ;;Total ram usage:        2 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		Interrupt level 1
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           
  1358                           ;psect for function _UART_RX_INTERRUPTION
  1359  0256                     _UART_RX_INTERRUPTION:
  1360  0256                     i1l738:
  1361                           
  1362                           ;parte_b_2.c: 39:     if (PIR1bits.RCIF) {
  1363  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1365  0258  1E8C               	btfss	12,5	;volatile
  1366  0259  2A5B               	goto	u20_21
  1367  025A  2A5C               	goto	u20_20
  1368  025B                     u20_21:
  1369  025B  2A67               	goto	i1l53
  1370  025C                     u20_20:
  1371  025C                     i1l740:
  1372                           
  1373                           ;parte_b_2.c: 44:         if (RCSTAbits.FERR || RCSTAbits.OERR)
  1374  025C  1918               	btfsc	24,2	;volatile
  1375  025D  2A5F               	goto	u21_21
  1376  025E  2A60               	goto	u21_20
  1377  025F                     u21_21:
  1378  025F  2A64               	goto	i1l56
  1379  0260                     u21_20:
  1380  0260                     i1l742:
  1381  0260  1C98               	btfss	24,1	;volatile
  1382  0261  2A63               	goto	u22_21
  1383  0262  2A64               	goto	u22_20
  1384  0263                     u22_21:
  1385  0263  2A67               	goto	i1l53
  1386  0264                     u22_20:
  1387  0264                     i1l56:
  1388                           
  1389                           ;parte_b_2.c: 45:         {;parte_b_2.c: 46:             RCSTAbits.CREN = 0;
  1390  0264  1218               	bcf	24,4	;volatile
  1391                           
  1392                           ;parte_b_2.c: 47:             RCSTAbits.CREN = 1;
  1393  0265  1618               	bsf	24,4	;volatile
  1394                           
  1395                           ;parte_b_2.c: 48:             PORTBbits.RB0 = 1;
  1396  0266  1406               	bsf	6,0	;volatile
  1397  0267                     i1l53:	
  1398                           ;parte_b_2.c: 50:     }
  1399                           
  1400                           
  1401                           ;parte_b_2.c: 52:     if(TMR0IF==1){
  1402  0267  1D0B               	btfss	11,2	;volatile
  1403  0268  2A6A               	goto	u23_21
  1404  0269  2A6B               	goto	u23_20
  1405  026A                     u23_21:
  1406  026A  2A6E               	goto	i1l58
  1407  026B                     u23_20:
  1408  026B                     i1l744:
  1409                           
  1410                           ;parte_b_2.c: 53:         TMR0IF=0;
  1411  026B  110B               	bcf	11,2	;volatile
  1412  026C                     i1l746:
  1413                           
  1414                           ;parte_b_2.c: 54:         TMR0 = 0x05;
  1415  026C  3005               	movlw	5
  1416  026D  0081               	movwf	1	;volatile
  1417  026E                     i1l58:
  1418  026E  0871               	movf	??_UART_RX_INTERRUPTION+1,w
  1419  026F  008A               	movwf	10
  1420  0270  0E70               	swapf	??_UART_RX_INTERRUPTION,w
  1421  0271  0083               	movwf	3
  1422  0272  0EFE               	swapf	btemp,f
  1423  0273  0E7E               	swapf	btemp,w
  1424  0274  0009               	retfie
  1425  0275                     __end_of_UART_RX_INTERRUPTION:
  1426  007E                     btemp	set	126	;btemp
  1427  007E                     wtemp0	set	126
  1428                           
  1429                           	psect	intentry
  1430  0004                     __pintentry:	
  1431                           ;incstack = 0
  1432                           ; Regs used in _UART_RX_INTERRUPTION: [wreg]
  1433                           
  1434  0004                     interrupt_function:
  1435  007E                     saved_w	set	btemp
  1436  0004  00FE               	movwf	btemp
  1437  0005  0E03               	swapf	3,w
  1438  0006  00F0               	movwf	??_UART_RX_INTERRUPTION
  1439  0007  080A               	movf	10,w
  1440  0008  00F1               	movwf	??_UART_RX_INTERRUPTION+1
  1441  0009  120A  118A  2A56   	ljmp	_UART_RX_INTERRUPTION
  1442                           
  1443                           	psect	config
  1444                           
  1445                           ;Config register CONFIG @ 0x2007
  1446                           ;	Oscillator Selection bits
  1447                           ;	FOSC = XT, XT oscillator
  1448                           ;	Watchdog Timer Enable bit
  1449                           ;	WDTE = OFF, WDT disabled
  1450                           ;	Power-up Timer Enable bit
  1451                           ;	PWRTE = OFF, PWRT disabled
  1452                           ;	Brown-out Reset Enable bit
  1453                           ;	BOREN = OFF, BOR disabled
  1454                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1455                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1456                           ;	Data EEPROM Memory Code Protection bit
  1457                           ;	CPD = OFF, Data EEPROM code protection off
  1458                           ;	Flash Program Memory Write Enable bits
  1459                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1460                           ;	In-Circuit Debugger Mode bit
  1461                           ;	DEBUG = 0x1, unprogrammed default
  1462                           ;	Flash Program Memory Code Protection bit
  1463                           ;	CP = OFF, Code protection off
  1464  2007                     	org	8199
  1465  2007  3F39               	dw	16185

Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     19      19
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    setStringOnSerial@outputString	PTR unsigned char  size(1) Largest target is 19
		 -> STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[2]), STR_1(CODE[19]), 

    itoa@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@voltageConvertedToString(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->___lwdiv
    _itoa->___lwdiv
    ___lwdiv->___lwmod
    ___lwdiv->___wmul

Critical Paths under _UART_RX_INTERRUPTION in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_itoa
    _itoa->___lwdiv

Critical Paths under _UART_RX_INTERRUPTION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3737
                                              8 BANK0     11    11      0
                            ___lwdiv
                             ___wmul
                               _itoa
                  _setStringOnSerial
 ---------------------------------------------------------------------------------
 (2) _setStringOnSerial                                    3     3      0     222
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _itoa                                                 4     1      3    2083
                                              4 BANK0      4     1      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     767
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     922
                                              8 COMMON     4     0      4
                                              0 BANK0      4     4      0
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _UART_RX_INTERRUPTION                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
     ___lwmod (ARG)
     ___wmul (ARG)
   ___wmul
   _itoa
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
     ___lwmod
   _setStringOnSerial

 _UART_RX_INTERRUPTION (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      13       5       23.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Apr 23 18:18:27 2021

                            l3 0169                              pc 0002                             l44 01FF  
                           l48 0210                             l64 0053                             fsr 0004  
          ___wmul@multiplicand 0074                            l160 0235                            l158 021D  
                          l430 01AF                            l440 01E9                            l820 0174  
                          l900 0025                            l830 0197                            l822 0177  
                          l910 003C                            l902 0029                            l832 019D  
                          l824 017E                            l816 016A                            l920 0045  
                          l912 003F                            l904 002C                            l834 019E  
                          l826 0182                            l818 016E                            l850 01C4  
                          l842 01B0                            l930 004C                            l922 0046  
                          l914 0042                            l906 0030                            l836 01A5  
                          l828 0186                            l852 01C8                            l844 01B6  
                          l860 01E5                            l940 007F                            l932 004D  
                          l924 0049                            l916 0043                            l908 003B  
                          l838 01AB                            l854 01D2                            l846 01B9  
                          l870 01EE                            l950 00A8                            l942 008C  
                          l934 0050                            l926 004A                            l918 0044  
                          l880 0217                            l856 01D8                            l848 01C0  
                          l864 00C6                            l872 01F9                            l952 00B2  
                          l944 0094                            l936 0057                            l928 004B  
                          l882 0224                            l858 01DF                            l866 0165  
                          l874 0203                            l954 00B6                            l946 009A  
                          l938 005F                            l890 0013                            l884 022B  
                          l876 0211                            l868 01EB                            l956 00BC  
                          l948 00A2                            l892 001D                            l886 0231  
                          l878 0213                            l894 0020                            l896 0021  
                          l898 0024                            u310 0197                            u311 0196  
                          u400 0203                            u305 0187                            u401 0202  
                          u330 01AB                            u410 0210                            u331 01AA  
                          u315 0193                            u411 020F                            u420 0217  
                          u340 01B6                            u421 0216                            u325 019F  
                          u341 01B5                            u270 0174                            u271 0173  
                          u360 01C8                            u361 01C7                            u450 0231  
                          u290 0186                            u370 01D2                            u451 0230  
                          u435 021E                            u291 0185                            u371 01D1  
                          u355 01BA                            u460 0057                            u445 0225  
                          u285 0178                            u461 0056                            u390 01E5  
                          u470 0094                            u391 01E4                            u375 01CE  
                          u471 0093                            u480 009A                            u385 01D9  
                          u481 0099                            fsr0 0004                            indf 0000  
            _setStringOnSerial 01EA             ?_setStringOnSerial 0070                           STR_1 023C  
                         STR_2 0254                           STR_3 024F                           STR_4 0252  
                         i1l53 0267                           i1l56 0264                           i1l58 026E  
                         _TMR0 0001                           _main 0013                           _itoa 00C6  
                         btemp 007E            ??_setStringOnSerial 0072                           start 000C  
                        ?_main 0070                          ?_itoa 0024                __end_of___lwdiv 01B0  
              __end_of___lwmod 01EA                          i1l740 025C                          i1l742 0260  
                        i1l744 026B                          i1l746 026C                          i1l738 0256  
                        u20_20 025C                          u20_21 025B                          u21_20 0260  
                        u21_21 025F                          u22_20 0264                          u22_21 0263  
                        u23_20 026B                          u23_21 026A                          _SPBRG 0099  
    __end_of_setStringOnSerial 0211                          _TXREG 0019                   main@preComma 002F  
       ??_UART_RX_INTERRUPTION 0070                   main@posComma 0030                          pclath 000A  
                        status 0003                          wtemp0 007E                __initialization 000F  
                 __end_of_main 00C6                   __end_of_itoa 016A                         ??_main 0028  
                       ??_itoa 0027                         _ADRESH 001E                         _ADRESL 009E  
                       _TMR0IF 005A  setStringOnSerial@outputString 0074                         ___wmul 0211  
                    ??___lwdiv 0020                      ??___lwmod 0076     __size_of_setStringOnSerial 0027  
                       saved_w 007E        __end_of__initialization 000F                 __pcstackCOMMON 0070  
                   __pmaintext 0013                        ?___wmul 0072                     __pintentry 0004  
                   __stringtab 0236   main@voltageConvertedToString 0029                __size_of___wmul 0025  
                      ___lwdiv 016A                        ___lwmod 01B0                        __ptext1 01EA  
                      __ptext2 00C6                        __ptext3 01B0                        __ptext4 016A  
                      __ptext5 0211                        __ptext6 0256           end_of_initialization 000F  
__size_of_UART_RX_INTERRUPTION 001F                        itoa@val 0024                        itoa@str 0026  
                    _RCSTAbits 0018                      _PORTBbits 0006         setStringOnSerial@count 0072  
                    _TRISAbits 0085                      _TRISCbits 0087                      _TXSTAbits 0098  
               __end_of___wmul 0236            start_initialization 000F                       ??___wmul 0076  
                    ___latbits 0002                  __pcstackBANK0 0020               ___lwdiv@dividend 007A  
                     ?___lwdiv 0078                       ?___lwmod 0072                      __pstrings 0236  
            main@potentiometer 0031               ___lwdiv@quotient 0021              interrupt_function 0004  
               ___wmul@product 0076                       _PIE1bits 008C                       _PIR1bits 000C  
 __end_of_UART_RX_INTERRUPTION 0275                     _ADCON0bits 001F                    __stringbase 023B  
                   _ADCON1bits 009F              ___wmul@multiplier 0072               __size_of___lwdiv 0046  
             __size_of___lwmod 003A             __end_of__stringtab 023C                ___lwdiv@divisor 0078  
              ___lwdiv@counter 0023                  __size_of_main 00B3                  __size_of_itoa 00A4  
                   _INTCONbits 000B                       intlevel1 0000           _UART_RX_INTERRUPTION 0256  
             ___lwmod@dividend 0074                      stringcode 0236                     _OPTION_REG 0081  
              ___lwmod@divisor 0072                ___lwmod@counter 0077                       stringdir 0236  
                     stringtab 0236          ?_UART_RX_INTERRUPTION 0070  
