

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Apr 22 19:52:33 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172                           
   173                           	psect	nvBANK0
   174  0023                     __pnvBANK0:
   175  0023                     _serialFlag:
   176  0023                     	ds	1
   177  000B                     _INTCONbits	set	11
   178  0001                     _TMR0	set	1
   179  001A                     _RCREG	set	26
   180  0006                     _PORTBbits	set	6
   181  0018                     _RCSTAbits	set	24
   182  000C                     _PIR1bits	set	12
   183  0019                     _TXREG	set	25
   184  005A                     _TMR0IF	set	90
   185  008C                     _PIE1bits	set	140
   186  0098                     _TXSTAbits	set	152
   187  0099                     _SPBRG	set	153
   188  0087                     _TRISCbits	set	135
   189  0081                     _OPTION_REG	set	129
   190  0086                     _TRISBbits	set	134
   191                           
   192                           	psect	strings
   193  0016                     __pstrings:
   194  0016                     stringtab:
   195  0016                     __stringtab:
   196  0016                     stringcode:	
   197                           ;	String table - string pointers are 1 byte each
   198                           
   199  0016                     stringdir:
   200  0016  3000               	movlw	high stringdir
   201  0017  008A               	movwf	10
   202  0018  0804               	movf	4,w
   203  0019  0A84               	incf	4,f
   204  001A  0782               	addwf	2,f
   205  001B                     __stringbase:
   206  001B  3400               	retlw	0
   207  001C                     __end_of__stringtab:
   208  001C                     STR_8:
   209  001C  340A               	retlw	10
   210  001D  3455               	retlw	85	;'U'
   211  001E  3473               	retlw	115	;'s'
   212  001F  3465               	retlw	101	;'e'
   213  0020  3420               	retlw	32	;' '
   214  0021  344C               	retlw	76	;'L'
   215  0022  3433               	retlw	51	;'3'
   216  0023  3420               	retlw	32	;' '
   217  0024  343D               	retlw	61	;'='
   218  0025  3420               	retlw	32	;' '
   219  0026  3462               	retlw	98	;'b'
   220  0027  3420               	retlw	32	;' '
   221  0028  347C               	retlw	124	;'|'
   222  0029  3420               	retlw	32	;' '
   223  002A  344C               	retlw	76	;'L'
   224  002B  3434               	retlw	52	;'4'
   225  002C  3420               	retlw	32	;' '
   226  002D  343D               	retlw	61	;'='
   227  002E  3420               	retlw	32	;' '
   228  002F  3464               	retlw	100	;'d'
   229  0030  3420               	retlw	32	;' '
   230  0031  3470               	retlw	112	;'p'
   231  0032  3461               	retlw	97	;'a'
   232  0033  3472               	retlw	114	;'r'
   233  0034  3461               	retlw	97	;'a'
   234  0035  3420               	retlw	32	;' '
   235  0036  3461               	retlw	97	;'a'
   236  0037  3470               	retlw	112	;'p'
   237  0038  3461               	retlw	97	;'a'
   238  0039  3467               	retlw	103	;'g'
   239  003A  3461               	retlw	97	;'a'
   240  003B  3472               	retlw	114	;'r'
   241  003C  340A               	retlw	10
   242  003D  3400               	retlw	0
   243  003E                     STR_7:
   244  003E  340A               	retlw	10
   245  003F  3455               	retlw	85	;'U'
   246  0040  3473               	retlw	115	;'s'
   247  0041  3465               	retlw	101	;'e'
   248  0042  3420               	retlw	32	;' '
   249  0043  344C               	retlw	76	;'L'
   250  0044  3433               	retlw	51	;'3'
   251  0045  3420               	retlw	32	;' '
   252  0046  343D               	retlw	61	;'='
   253  0047  3420               	retlw	32	;' '
   254  0048  3461               	retlw	97	;'a'
   255  0049  3420               	retlw	32	;' '
   256  004A  347C               	retlw	124	;'|'
   257  004B  3420               	retlw	32	;' '
   258  004C  344C               	retlw	76	;'L'
   259  004D  3434               	retlw	52	;'4'
   260  004E  3420               	retlw	32	;' '
   261  004F  343D               	retlw	61	;'='
   262  0050  3420               	retlw	32	;' '
   263  0051  3463               	retlw	99	;'c'
   264  0052  3420               	retlw	32	;' '
   265  0053  3470               	retlw	112	;'p'
   266  0054  3461               	retlw	97	;'a'
   267  0055  3472               	retlw	114	;'r'
   268  0056  3461               	retlw	97	;'a'
   269  0057  3420               	retlw	32	;' '
   270  0058  3461               	retlw	97	;'a'
   271  0059  3463               	retlw	99	;'c'
   272  005A  3465               	retlw	101	;'e'
   273  005B  346E               	retlw	110	;'n'
   274  005C  3464               	retlw	100	;'d'
   275  005D  3465               	retlw	101	;'e'
   276  005E  3472               	retlw	114	;'r'
   277  005F  3400               	retlw	0
   278  0060                     STR_5:
   279  0060  340A               	retlw	10
   280  0061  3463               	retlw	99	;'c'
   281  0062  346F               	retlw	111	;'o'
   282  0063  3464               	retlw	100	;'d'
   283  0064  3469               	retlw	105	;'i'
   284  0065  3467               	retlw	103	;'g'
   285  0066  346F               	retlw	111	;'o'
   286  0067  3420               	retlw	32	;' '
   287  0068  3464               	retlw	100	;'d'
   288  0069  3469               	retlw	105	;'i'
   289  006A  3467               	retlw	103	;'g'
   290  006B  3469               	retlw	105	;'i'
   291  006C  3474               	retlw	116	;'t'
   292  006D  346F               	retlw	111	;'o'
   293  006E  3420               	retlw	32	;' '
   294  006F  3469               	retlw	105	;'i'
   295  0070  346E               	retlw	110	;'n'
   296  0071  3476               	retlw	118	;'v'
   297  0072  3461               	retlw	97	;'a'
   298  0073  346C               	retlw	108	;'l'
   299  0074  3469               	retlw	105	;'i'
   300  0075  3464               	retlw	100	;'d'
   301  0076  346F               	retlw	111	;'o'
   302  0077  3400               	retlw	0
   303  0078                     STR_1:
   304  0078  340A               	retlw	10
   305  0079  344C               	retlw	76	;'L'
   306  007A  3433               	retlw	51	;'3'
   307  007B  3420               	retlw	32	;' '
   308  007C  3461               	retlw	97	;'a'
   309  007D  3470               	retlw	112	;'p'
   310  007E  3461               	retlw	97	;'a'
   311  007F  3467               	retlw	103	;'g'
   312  0080  3461               	retlw	97	;'a'
   313  0081  3464               	retlw	100	;'d'
   314  0082  346F               	retlw	111	;'o'
   315  0083  3400               	retlw	0
   316  0084                     STR_3:
   317  0084  340A               	retlw	10
   318  0085  344C               	retlw	76	;'L'
   319  0086  3434               	retlw	52	;'4'
   320  0087  3420               	retlw	32	;' '
   321  0088  3461               	retlw	97	;'a'
   322  0089  3470               	retlw	112	;'p'
   323  008A  3461               	retlw	97	;'a'
   324  008B  3467               	retlw	103	;'g'
   325  008C  3461               	retlw	97	;'a'
   326  008D  3464               	retlw	100	;'d'
   327  008E  346F               	retlw	111	;'o'
   328  008F  3400               	retlw	0
   329  0090                     STR_2:
   330  0090  340A               	retlw	10
   331  0091  344C               	retlw	76	;'L'
   332  0092  3433               	retlw	51	;'3'
   333  0093  3420               	retlw	32	;' '
   334  0094  3461               	retlw	97	;'a'
   335  0095  3463               	retlw	99	;'c'
   336  0096  3465               	retlw	101	;'e'
   337  0097  3473               	retlw	115	;'s'
   338  0098  346F               	retlw	111	;'o'
   339  0099  3400               	retlw	0
   340  009A                     STR_4:
   341  009A  340A               	retlw	10
   342  009B  344C               	retlw	76	;'L'
   343  009C  3434               	retlw	52	;'4'
   344  009D  3420               	retlw	32	;' '
   345  009E  3461               	retlw	97	;'a'
   346  009F  3463               	retlw	99	;'c'
   347  00A0  3465               	retlw	101	;'e'
   348  00A1  3473               	retlw	115	;'s'
   349  00A2  346F               	retlw	111	;'o'
   350  00A3  3400               	retlw	0
   351  00A4                     STR_6:
   352  00A4  340A               	retlw	10
   353  00A5  340A               	retlw	10
   354  00A6  3400               	retlw	0
   355                           
   356                           	psect	cinit
   357  000F                     start_initialization:	
   358                           ; #config settings
   359                           
   360  000F                     __initialization:
   361                           
   362                           ; Clear objects allocated to COMMON
   363  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   364  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   365  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   366  0012                     end_of_initialization:	
   367                           ;End of C runtime variable initialization code
   368                           
   369  0012                     __end_of__initialization:
   370  0012  0183               	clrf	3
   371  0013  120A  118A  28A7   	ljmp	_main	;jump to C main() function
   372                           
   373                           	psect	bssCOMMON
   374  0078                     __pbssCOMMON:
   375  0078                     _aux:
   376  0078                     	ds	2
   377  007A                     _input:
   378  007A                     	ds	1
   379                           
   380                           	psect	cstackCOMMON
   381  0070                     __pcstackCOMMON:
   382  0070                     ?_setStringOnSerial:
   383  0070                     ?_UART_RX_INTERRUPTION:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_UART_RX_INTERRUPTION:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_handleLedSelection:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_main:	
   393                           ; 1 bytes @ 0x0
   394                           
   395                           
   396                           ; 1 bytes @ 0x0
   397  0070                     	ds	3
   398  0073                     ??_setStringOnSerial:
   399  0073                     setStringOnSerial@count:	
   400                           ; 1 bytes @ 0x3
   401                           
   402                           
   403                           ; 2 bytes @ 0x3
   404  0073                     	ds	2
   405  0075                     setStringOnSerial@outputString:
   406                           
   407                           ; 1 bytes @ 0x5
   408  0075                     	ds	1
   409  0076                     ??_handleLedSelection:
   410                           
   411                           ; 1 bytes @ 0x6
   412  0076                     	ds	2
   413                           
   414                           	psect	cstackBANK0
   415  0020                     __pcstackBANK0:
   416  0020                     ??_main:
   417                           
   418                           ; 1 bytes @ 0x0
   419  0020                     	ds	3
   420                           
   421                           	psect	maintext
   422  00A7                     __pmaintext:	
   423 ;;
   424 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   425 ;;
   426 ;; *************** function _main *****************
   427 ;; Defined at:
   428 ;;		line 82 in file "parte_b_4.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : B00/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   442 ;;      Params:         0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0
   444 ;;      Temps:          0       3       0       0       0
   445 ;;      Totals:         0       3       0       0       0
   446 ;;Total ram usage:        3 bytes
   447 ;; Hardware stack levels required when called:    4
   448 ;; This function calls:
   449 ;;		_handleLedSelection
   450 ;;		_setStringOnSerial
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _main
   458  00A7                     _main:
   459  00A7                     l881:	
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   462                           
   463                           
   464                           ;parte_b_4.c: 85:     TRISBbits.TRISB0 = 0;
   465  00A7  1683               	bsf	3,5	;RP0=1, select bank1
   466  00A8  1303               	bcf	3,6	;RP1=0, select bank1
   467  00A9  1006               	bcf	6,0	;volatile
   468                           
   469                           ;parte_b_4.c: 86:     TRISBbits.TRISB1 = 0;
   470  00AA  1086               	bcf	6,1	;volatile
   471                           
   472                           ;parte_b_4.c: 87:     TRISBbits.TRISB2 = 0;
   473  00AB  1106               	bcf	6,2	;volatile
   474                           
   475                           ;parte_b_4.c: 88:     TRISBbits.TRISB3 = 0;
   476  00AC  1186               	bcf	6,3	;volatile
   477  00AD                     l883:
   478                           
   479                           ;parte_b_4.c: 91:     OPTION_REG = 0x01;
   480  00AD  3001               	movlw	1
   481  00AE  0081               	movwf	1	;volatile
   482                           
   483                           ;parte_b_4.c: 94:     TMR0 = 0x05;
   484  00AF  3005               	movlw	5
   485  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   486  00B1  1303               	bcf	3,6	;RP1=0, select bank0
   487  00B2  0081               	movwf	1	;volatile
   488  00B3                     l885:
   489                           
   490                           ;parte_b_4.c: 95:     INTCONbits.TMR0IE=1;
   491  00B3  168B               	bsf	11,5	;volatile
   492  00B4                     l887:
   493                           
   494                           ;parte_b_4.c: 98:     TRISCbits.TRISC7 = 1;
   495  00B4  1683               	bsf	3,5	;RP0=1, select bank1
   496  00B5  1303               	bcf	3,6	;RP1=0, select bank1
   497  00B6  1787               	bsf	7,7	;volatile
   498  00B7                     l889:
   499                           
   500                           ;parte_b_4.c: 99:     TRISCbits.TRISC6 = 0;
   501  00B7  1307               	bcf	7,6	;volatile
   502                           
   503                           ;parte_b_4.c: 104:     SPBRG = 25;
   504  00B8  3019               	movlw	25
   505  00B9  0099               	movwf	25	;volatile
   506  00BA                     l891:
   507                           
   508                           ;parte_b_4.c: 106:     TXSTAbits.TX9 = 0;
   509  00BA  1318               	bcf	24,6	;volatile
   510  00BB                     l893:
   511                           
   512                           ;parte_b_4.c: 107:     TXSTAbits.TXEN = 1;
   513  00BB  1698               	bsf	24,5	;volatile
   514  00BC                     l895:
   515                           
   516                           ;parte_b_4.c: 108:     TXSTAbits.SYNC = 0;
   517  00BC  1218               	bcf	24,4	;volatile
   518  00BD                     l897:
   519                           
   520                           ;parte_b_4.c: 109:     TXSTAbits.BRGH = 1;
   521  00BD  1518               	bsf	24,2	;volatile
   522  00BE                     l899:
   523                           
   524                           ;parte_b_4.c: 111:     RCSTAbits.SPEN = 1;
   525  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   526  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   527  00C0  1798               	bsf	24,7	;volatile
   528  00C1                     l901:
   529                           
   530                           ;parte_b_4.c: 112:     RCSTAbits.RX9 = 0;
   531  00C1  1318               	bcf	24,6	;volatile
   532  00C2                     l903:
   533                           
   534                           ;parte_b_4.c: 113:     RCSTAbits.CREN = 1;
   535  00C2  1618               	bsf	24,4	;volatile
   536  00C3                     l905:
   537                           
   538                           ;parte_b_4.c: 116:     INTCONbits.PEIE = 1;
   539  00C3  170B               	bsf	11,6	;volatile
   540  00C4                     l907:
   541                           
   542                           ;parte_b_4.c: 117:     INTCONbits.GIE = 1;
   543  00C4  178B               	bsf	11,7	;volatile
   544  00C5                     l909:
   545                           
   546                           ;parte_b_4.c: 118:     PIE1bits.RCIE = 1;
   547  00C5  1683               	bsf	3,5	;RP0=1, select bank1
   548  00C6  1303               	bcf	3,6	;RP1=0, select bank1
   549  00C7  168C               	bsf	12,5	;volatile
   550  00C8                     l911:
   551                           
   552                           ;parte_b_4.c: 122:         serialFlag=0;
   553  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   554  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   555  00CA  01A3               	clrf	_serialFlag
   556  00CB                     l913:
   557                           
   558                           ;parte_b_4.c: 124:         setStringOnSerial("\nUse L3 = a | L4 = c para acender");
   559  00CB  3023               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   560  00CC  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   561  00D1                     l915:
   562                           
   563                           ;parte_b_4.c: 125:         setStringOnSerial("\nUse L3 = b | L4 = d para apagar\n");
   564  00D1  3001               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   565  00D2  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   566  00D7                     l917:
   567                           
   568                           ;parte_b_4.c: 128:             if(serialFlag){
   569  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   570  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   571  00D9  0823               	movf	_serialFlag,w
   572  00DA  1903               	btfsc	3,2
   573  00DB  28DD               	goto	u151
   574  00DC  28DE               	goto	u150
   575  00DD                     u151:
   576  00DD  28D7               	goto	l917
   577  00DE                     u150:
   578  00DE                     l921:
   579                           
   580                           ;parte_b_4.c: 133:         handleLedSelection();
   581  00DE  120A  118A  20F5  120A  118A  	fcall	_handleLedSelection
   582  00E3                     l923:
   583                           
   584                           ;parte_b_4.c: 135:          _delay((unsigned long)((2000)*(4000000/4000.0)));
   585  00E3  300B               	movlw	11
   586  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   587  00E5  1303               	bcf	3,6	;RP1=0, select bank0
   588  00E6  00A2               	movwf	??_main+2
   589  00E7  3026               	movlw	38
   590  00E8  00A1               	movwf	??_main+1
   591  00E9  305D               	movlw	93
   592  00EA  00A0               	movwf	??_main
   593  00EB                     u167:
   594  00EB  0BA0               	decfsz	??_main,f
   595  00EC  28EB               	goto	u167
   596  00ED  0BA1               	decfsz	??_main+1,f
   597  00EE  28EB               	goto	u167
   598  00EF  0BA2               	decfsz	??_main+2,f
   599  00F0  28EB               	goto	u167
   600  00F1  28C8               	goto	l911
   601  00F2  120A  118A  280C   	ljmp	start
   602  00F5                     __end_of_main:
   603                           
   604                           	psect	text1
   605  00F5                     __ptext1:	
   606 ;; *************** function _handleLedSelection *****************
   607 ;; Defined at:
   608 ;;		line 54 in file "parte_b_4.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   622 ;;      Params:         0       0       0       0       0
   623 ;;      Locals:         0       0       0       0       0
   624 ;;      Temps:          2       0       0       0       0
   625 ;;      Totals:         2       0       0       0       0
   626 ;;Total ram usage:        2 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		_setStringOnSerial
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           
   637                           ;psect for function _handleLedSelection
   638  00F5                     _handleLedSelection:
   639  00F5                     l783:	
   640                           ;incstack = 0
   641                           ; Regs used in _handleLedSelection: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   642                           
   643                           
   644                           ;parte_b_4.c: 55:     switch(input){
   645  00F5  292B               	goto	l795
   646  00F6                     l59:	
   647                           ;parte_b_4.c: 56:             case 'b':
   648                           
   649                           
   650                           ;parte_b_4.c: 57:                 PORTBbits.RB2 = 0;
   651  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   652  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   653  00F8  1106               	bcf	6,2	;volatile
   654  00F9                     l785:
   655                           
   656                           ;parte_b_4.c: 58:                 setStringOnSerial("\nL3 apagado");
   657  00F9  305D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   658  00FA  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   659                           
   660                           ;parte_b_4.c: 59:                 break;
   661  00FF  2941               	goto	l65
   662  0100                     l61:	
   663                           ;parte_b_4.c: 61:             case 'a':
   664                           
   665                           
   666                           ;parte_b_4.c: 62:                 PORTBbits.RB2 = 1;
   667  0100  1283               	bcf	3,5	;RP0=0, select bank0
   668  0101  1303               	bcf	3,6	;RP1=0, select bank0
   669  0102  1506               	bsf	6,2	;volatile
   670  0103                     l787:
   671                           
   672                           ;parte_b_4.c: 63:                 setStringOnSerial("\nL3 aceso");
   673  0103  3075               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   674  0104  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   675                           
   676                           ;parte_b_4.c: 64:                 break;
   677  0109  2941               	goto	l65
   678  010A                     l62:	
   679                           ;parte_b_4.c: 66:             case 'd':
   680                           
   681                           
   682                           ;parte_b_4.c: 67:                 PORTBbits.RB3 = 0;
   683  010A  1283               	bcf	3,5	;RP0=0, select bank0
   684  010B  1303               	bcf	3,6	;RP1=0, select bank0
   685  010C  1186               	bcf	6,3	;volatile
   686  010D                     l789:
   687                           
   688                           ;parte_b_4.c: 68:                 setStringOnSerial("\nL4 apagado");
   689  010D  3069               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   690  010E  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   691                           
   692                           ;parte_b_4.c: 69:                 break;
   693  0113  2941               	goto	l65
   694  0114                     l63:	
   695                           ;parte_b_4.c: 71:             case 'c':
   696                           
   697                           
   698                           ;parte_b_4.c: 72:                 PORTBbits.RB3 = 1;
   699  0114  1283               	bcf	3,5	;RP0=0, select bank0
   700  0115  1303               	bcf	3,6	;RP1=0, select bank0
   701  0116  1586               	bsf	6,3	;volatile
   702  0117                     l791:
   703                           
   704                           ;parte_b_4.c: 73:                 setStringOnSerial("\nL4 aceso");
   705  0117  307F               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   706  0118  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   707                           
   708                           ;parte_b_4.c: 74:                 break;
   709  011D  2941               	goto	l65
   710  011E                     l793:
   711                           
   712                           ;parte_b_4.c: 77:                 setStringOnSerial("\ncodigo digito invalido");
   713  011E  3045               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   714  011F  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   715                           
   716                           ;parte_b_4.c: 78:                 setStringOnSerial("\n\n");
   717  0124  3089               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   718  0125  120A  118A  2142  120A  118A  	fcall	_setStringOnSerial
   719                           
   720                           ;parte_b_4.c: 79:          }
   721  012A  2941               	goto	l65
   722  012B                     l795:
   723  012B  087A               	movf	_input,w
   724  012C  00F6               	movwf	??_handleLedSelection
   725  012D  01F7               	clrf	??_handleLedSelection+1
   726                           
   727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   728                           ; Switch size 1, requested type "simple"
   729                           ; Number of cases is 1, Range of values is 0 to 0
   730                           ; switch strategies available:
   731                           ; Name         Instructions Cycles
   732                           ; simple_byte            4     3 (average)
   733                           ; direct_byte           11     8 (fixed)
   734                           ; jumptable            260     6 (fixed)
   735                           ;	Chosen strategy is simple_byte
   736  012E  0877               	movf	??_handleLedSelection+1,w
   737  012F  3A00               	xorlw	0	; case 0
   738  0130  1903               	skipnz
   739  0131  2933               	goto	l945
   740  0132  291E               	goto	l793
   741  0133                     l945:
   742                           
   743                           ; Switch size 1, requested type "simple"
   744                           ; Number of cases is 4, Range of values is 97 to 100
   745                           ; switch strategies available:
   746                           ; Name         Instructions Cycles
   747                           ; simple_byte           13     7 (average)
   748                           ; direct_byte           23    11 (fixed)
   749                           ; jumptable            263     9 (fixed)
   750                           ;	Chosen strategy is simple_byte
   751  0133  0876               	movf	??_handleLedSelection,w
   752  0134  3A61               	xorlw	97	; case 97
   753  0135  1903               	skipnz
   754  0136  2900               	goto	l61
   755  0137  3A03               	xorlw	3	; case 98
   756  0138  1903               	skipnz
   757  0139  28F6               	goto	l59
   758  013A  3A01               	xorlw	1	; case 99
   759  013B  1903               	skipnz
   760  013C  2914               	goto	l63
   761  013D  3A07               	xorlw	7	; case 100
   762  013E  1903               	skipnz
   763  013F  290A               	goto	l62
   764  0140  291E               	goto	l793
   765  0141                     l65:
   766  0141  0008               	return
   767  0142                     __end_of_handleLedSelection:
   768                           
   769                           	psect	text2
   770  0142                     __ptext2:	
   771 ;; *************** function _setStringOnSerial *****************
   772 ;; Defined at:
   773 ;;		line 22 in file "parte_b_4.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  outputString    1    wreg     PTR unsigned char 
   776 ;;		 -> STR_8(34), STR_7(34), STR_6(3), STR_5(24), 
   777 ;;		 -> STR_4(10), STR_3(12), STR_2(10), STR_1(12), 
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  outputString    1    5[COMMON] PTR unsigned char 
   780 ;;		 -> STR_8(34), STR_7(34), STR_6(3), STR_5(24), 
   781 ;;		 -> STR_4(10), STR_3(12), STR_2(10), STR_1(12), 
   782 ;;  count           2    3[COMMON] int 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   792 ;;      Params:         0       0       0       0       0
   793 ;;      Locals:         3       0       0       0       0
   794 ;;      Temps:          0       0       0       0       0
   795 ;;      Totals:         3       0       0       0       0
   796 ;;Total ram usage:        3 bytes
   797 ;; Hardware stack levels used:    2
   798 ;; Hardware stack levels required when called:    1
   799 ;; This function calls:
   800 ;;		Nothing
   801 ;; This function is called by:
   802 ;;		_handleLedSelection
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           
   808                           ;psect for function _setStringOnSerial
   809  0142                     _setStringOnSerial:
   810                           
   811                           ;incstack = 0
   812                           ; Regs used in _setStringOnSerial: [wreg-fsr0h+status,2+status,0+pclath]
   813                           ;setStringOnSerial@outputString stored from wreg
   814  0142  00F5               	movwf	setStringOnSerial@outputString
   815  0143                     l775:
   816                           
   817                           ;parte_b_4.c: 23:     int count=0;
   818  0143  01F3               	clrf	setStringOnSerial@count
   819  0144  01F4               	clrf	setStringOnSerial@count+1
   820                           
   821                           ;parte_b_4.c: 24:     while(outputString[count] != 0){
   822  0145  295B               	goto	l781
   823  0146                     l777:
   824                           
   825                           ;parte_b_4.c: 25:         TXREG = outputString[count];
   826  0146  0873               	movf	setStringOnSerial@count,w
   827  0147  0775               	addwf	setStringOnSerial@outputString,w
   828  0148  0084               	movwf	4
   829  0149  120A  118A  2016  120A  118A  	fcall	stringdir
   830  014E  1283               	bcf	3,5	;RP0=0, select bank0
   831  014F  1303               	bcf	3,6	;RP1=0, select bank0
   832  0150  0099               	movwf	25	;volatile
   833  0151                     l779:
   834                           
   835                           ;parte_b_4.c: 26:         count++;
   836  0151  3001               	movlw	1
   837  0152  07F3               	addwf	setStringOnSerial@count,f
   838  0153  1803               	skipnc
   839  0154  0AF4               	incf	setStringOnSerial@count+1,f
   840  0155  3000               	movlw	0
   841  0156  07F4               	addwf	setStringOnSerial@count+1,f
   842  0157                     l41:	
   843                           ;parte_b_4.c: 27:         while(!PIR1bits.TXIF);
   844                           
   845  0157  1E0C               	btfss	12,4	;volatile
   846  0158  295A               	goto	u81
   847  0159  295B               	goto	u80
   848  015A                     u81:
   849  015A  2957               	goto	l41
   850  015B                     u80:
   851  015B                     l781:
   852                           
   853                           ;parte_b_4.c: 24:     while(outputString[count] != 0){
   854  015B  0873               	movf	setStringOnSerial@count,w
   855  015C  0775               	addwf	setStringOnSerial@outputString,w
   856  015D  0084               	movwf	4
   857  015E  120A  118A  2016  120A  118A  	fcall	stringdir
   858  0163  3A00               	xorlw	0
   859  0164  1D03               	skipz
   860  0165  2967               	goto	u91
   861  0166  2968               	goto	u90
   862  0167                     u91:
   863  0167  2946               	goto	l777
   864  0168                     u90:
   865  0168                     l45:
   866  0168  0008               	return
   867  0169                     __end_of_setStringOnSerial:
   868                           
   869                           	psect	text3
   870  0169                     __ptext3:	
   871 ;; *************** function _UART_RX_INTERRUPTION *****************
   872 ;; Defined at:
   873 ;;		line 31 in file "parte_b_4.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   887 ;;      Params:         0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0
   889 ;;      Temps:          3       0       0       0       0
   890 ;;      Totals:         3       0       0       0       0
   891 ;;Total ram usage:        3 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		Interrupt level 1
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _UART_RX_INTERRUPTION
   902  0169                     _UART_RX_INTERRUPTION:
   903  0169                     i1l801:
   904                           
   905                           ;parte_b_4.c: 32:     if (PIR1bits.RCIF) {
   906  0169  1283               	bcf	3,5	;RP0=0, select bank0
   907  016A  1303               	bcf	3,6	;RP1=0, select bank0
   908  016B  1E8C               	btfss	12,5	;volatile
   909  016C  296E               	goto	u10_21
   910  016D  296F               	goto	u10_20
   911  016E                     u10_21:
   912  016E  2980               	goto	i1l811
   913  016F                     u10_20:
   914  016F                     i1l803:
   915                           
   916                           ;parte_b_4.c: 37:         if (RCSTAbits.FERR || RCSTAbits.OERR)
   917  016F  1918               	btfsc	24,2	;volatile
   918  0170  2972               	goto	u11_21
   919  0171  2973               	goto	u11_20
   920  0172                     u11_21:
   921  0172  2977               	goto	i1l53
   922  0173                     u11_20:
   923  0173                     i1l805:
   924  0173  1C98               	btfss	24,1	;volatile
   925  0174  2976               	goto	u12_21
   926  0175  2977               	goto	u12_20
   927  0176                     u12_21:
   928  0176  297A               	goto	i1l807
   929  0177                     u12_20:
   930  0177                     i1l53:
   931                           
   932                           ;parte_b_4.c: 38:         {;parte_b_4.c: 39:             RCSTAbits.CREN = 0;
   933  0177  1218               	bcf	24,4	;volatile
   934                           
   935                           ;parte_b_4.c: 40:             RCSTAbits.CREN = 1;
   936  0178  1618               	bsf	24,4	;volatile
   937                           
   938                           ;parte_b_4.c: 41:             PORTBbits.RB2 = 1;
   939  0179  1506               	bsf	6,2	;volatile
   940  017A                     i1l807:
   941                           
   942                           ;parte_b_4.c: 44:         input = RCREG;
   943  017A  081A               	movf	26,w	;volatile
   944  017B  00F0               	movwf	??_UART_RX_INTERRUPTION
   945  017C  0870               	movf	??_UART_RX_INTERRUPTION,w
   946  017D  00FA               	movwf	_input
   947  017E                     i1l809:
   948                           
   949                           ;parte_b_4.c: 45:         serialFlag = 1;
   950  017E  01A3               	clrf	_serialFlag
   951  017F  0AA3               	incf	_serialFlag,f
   952  0180                     i1l811:
   953                           
   954                           ;parte_b_4.c: 48:     if(TMR0IF==1){
   955  0180  1D0B               	btfss	11,2	;volatile
   956  0181  2983               	goto	u13_21
   957  0182  2984               	goto	u13_20
   958  0183                     u13_21:
   959  0183  2987               	goto	i1l55
   960  0184                     u13_20:
   961  0184                     i1l813:
   962                           
   963                           ;parte_b_4.c: 49:         TMR0IF=0;
   964  0184  110B               	bcf	11,2	;volatile
   965  0185                     i1l815:
   966                           
   967                           ;parte_b_4.c: 50:         TMR0 = 0x05;
   968  0185  3005               	movlw	5
   969  0186  0081               	movwf	1	;volatile
   970  0187                     i1l55:
   971  0187  0872               	movf	??_UART_RX_INTERRUPTION+2,w
   972  0188  008A               	movwf	10
   973  0189  0E71               	swapf	??_UART_RX_INTERRUPTION+1,w
   974  018A  0083               	movwf	3
   975  018B  0EFE               	swapf	btemp,f
   976  018C  0E7E               	swapf	btemp,w
   977  018D  0009               	retfie
   978  018E                     __end_of_UART_RX_INTERRUPTION:
   979  007E                     btemp	set	126	;btemp
   980  007E                     wtemp0	set	126
   981                           
   982                           	psect	intentry
   983  0004                     __pintentry:	
   984                           ;incstack = 0
   985                           ; Regs used in _UART_RX_INTERRUPTION: [wreg]
   986                           
   987  0004                     interrupt_function:
   988  007E                     saved_w	set	btemp
   989  0004  00FE               	movwf	btemp
   990  0005  0E03               	swapf	3,w
   991  0006  00F1               	movwf	??_UART_RX_INTERRUPTION+1
   992  0007  080A               	movf	10,w
   993  0008  00F2               	movwf	??_UART_RX_INTERRUPTION+2
   994  0009  120A  118A  2969   	ljmp	_UART_RX_INTERRUPTION
   995                           
   996                           	psect	config
   997                           
   998                           ;Config register CONFIG @ 0x2007
   999                           ;	Oscillator Selection bits
  1000                           ;	FOSC = XT, XT oscillator
  1001                           ;	Watchdog Timer Enable bit
  1002                           ;	WDTE = OFF, WDT disabled
  1003                           ;	Power-up Timer Enable bit
  1004                           ;	PWRTE = OFF, PWRT disabled
  1005                           ;	Brown-out Reset Enable bit
  1006                           ;	BOREN = OFF, BOR disabled
  1007                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1008                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1009                           ;	Data EEPROM Memory Code Protection bit
  1010                           ;	CPD = OFF, Data EEPROM code protection off
  1011                           ;	Flash Program Memory Write Enable bits
  1012                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1013                           ;	In-Circuit Debugger Mode bit
  1014                           ;	DEBUG = 0x1, unprogrammed default
  1015                           ;	Flash Program Memory Code Protection bit
  1016                           ;	CP = OFF, Code protection off
  1017  2007                     	org	8199
  1018  2007  3F39               	dw	16185

Data Sizes:
    Strings     139
    Constant    0
    Data        0
    BSS         3
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      3       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    setStringOnSerial@outputString	PTR unsigned char  size(1) Largest target is 34
		 -> STR_8(CODE[34]), STR_7(CODE[34]), STR_6(CODE[3]), STR_5(CODE[24]), 
		 -> STR_4(CODE[10]), STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_handleLedSelection
    _handleLedSelection->_setStringOnSerial

Critical Paths under _UART_RX_INTERRUPTION in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART_RX_INTERRUPTION in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     708
                                              0 BANK0      3     3      0
                 _handleLedSelection
                  _setStringOnSerial
 ---------------------------------------------------------------------------------
 (1) _handleLedSelection                                   2     2      0     354
                                              6 COMMON     2     2      0
                  _setStringOnSerial
 ---------------------------------------------------------------------------------
 (2) _setStringOnSerial                                    3     3      0     354
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _UART_RX_INTERRUPTION                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _handleLedSelection
     _setStringOnSerial
   _setStringOnSerial

 _UART_RX_INTERRUPTION (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       F      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Apr 22 19:52:33 2021

                            pc 0002                             l41 0157                             l45 0168  
                           l61 0100                             l62 010A                             l63 0114  
                           l65 0141                             l59 00F6                             u80 015B  
                           u81 015A                             u90 0168                             u91 0167  
                           fsr 0004                            l901 00C1                            l911 00C8  
                          l903 00C2                            l921 00DE                            l913 00CB  
                          l905 00C3                            l923 00E3                            l915 00D1  
                          l907 00C4                            l781 015B                            l917 00D7  
                          l909 00C5                            l775 0143                            l791 0117  
                          l783 00F5                            l777 0146                            l945 0133  
                          l793 011E                            l785 00F9                            l881 00A7  
                          l779 0151                            l787 0103                            l795 012B  
                          l891 00BA                            l883 00AD                            l789 010D  
                          l893 00BB                            l885 00B3                            l895 00BC  
                          l887 00B4                            l897 00BD                            l889 00B7  
                          l899 00BE                            u150 00DE                            u151 00DD  
                          u167 00EB                            _aux 0078                            fsr0 0004  
            _setStringOnSerial 0142             ?_setStringOnSerial 0070                           STR_1 0078  
                         STR_2 0090                           STR_3 0084                           STR_4 009A  
                         STR_5 0060                           STR_6 00A4                           STR_7 003E  
                         STR_8 001C                           i1l53 0177                           i1l55 0187  
                         _TMR0 0001                           _main 00A7                           btemp 007E  
          ??_setStringOnSerial 0073                           start 000C                          ?_main 0070  
                        i1l801 0169                          i1l803 016F                          i1l811 0180  
                        i1l813 0184                          i1l805 0173                          i1l815 0185  
                        i1l807 017A                          i1l809 017E                          _RCREG 001A  
                        u10_20 016F                          u10_21 016E                          u11_20 0173  
                        u11_21 0172                          u12_20 0177                          u12_21 0176  
                        u13_20 0184                          u13_21 0183                          _SPBRG 0099  
    __end_of_setStringOnSerial 0169                          _TXREG 0019         ??_UART_RX_INTERRUPTION 0070  
                        _input 007A                          pclath 000A                          status 0003  
                        wtemp0 007E                __initialization 000F                   __end_of_main 00F5  
                       ??_main 0020             _handleLedSelection 00F5            ?_handleLedSelection 0070  
                       _TMR0IF 005A  setStringOnSerial@outputString 0075           ??_handleLedSelection 0076  
   __size_of_setStringOnSerial 0027                         saved_w 007E        __end_of__initialization 0012  
               __pcstackCOMMON 0070                     __pmaintext 00A7                     __pintentry 0004  
                   __stringtab 0016                        __ptext1 00F5                        __ptext2 0142  
                      __ptext3 0169           end_of_initialization 0012  __size_of_UART_RX_INTERRUPTION 0025  
                   _serialFlag 0023                      _RCSTAbits 0018                      _PORTBbits 0006  
       setStringOnSerial@count 0073                      _TRISBbits 0086                      _TRISCbits 0087  
                    _TXSTAbits 0098    __size_of_handleLedSelection 004D            start_initialization 000F  
                  __pbssCOMMON 0078                      ___latbits 0002                  __pcstackBANK0 0020  
                    __pnvBANK0 0023                      __pstrings 0016              interrupt_function 0004  
                     _PIE1bits 008C                       _PIR1bits 000C   __end_of_UART_RX_INTERRUPTION 018E  
                  __stringbase 001B             __end_of__stringtab 001C                  __size_of_main 004E  
   __end_of_handleLedSelection 0142                     _INTCONbits 000B                       intlevel1 0000  
         _UART_RX_INTERRUPTION 0169                      stringcode 0016                     _OPTION_REG 0081  
                     stringdir 0016                       stringtab 0016          ?_UART_RX_INTERRUPTION 0070  
